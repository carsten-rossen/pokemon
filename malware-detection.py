#!/usr/bin/python3

# Script Name: Signature-based Malware Detection Part 2 of 3
# Class Name: Ops 401
# Author Name: Carsten Rossen
# Date of Latest Revision: 5/18/21 
# Purpose: Search a directory for files with a specified name.
# Purpose: Create a hash value of each file in a specified directory.


# Import functions

import os
import hashlib
import datetime


# Declare functions

# Find files with a specified name.
def detect():
    # get name to search for
    file_name = input("File name to search for: ")

    # get name of directory to search in
    dir_name = input("Directory to search in: ")
    print()

    # create a file with positives
    os.system(f'find {dir_name} -name {file_name} > positives.txt')

    # initiate positives counter
    count = 0

    # open file with positive hits
    with open('positives.txt') as file:
        data = file.read()

        # print positive files to the screen and add to the positives counter
        for line in data.splitlines():
            print(line)
            count += 1

    # print the number of files searched and the number of positives
    print("\nFiles searched: "), os.system(f"ls {dir_name} | wc -l")
    print(f"\nPositives detections: \n{count}")

    # delete the file with positive hits
    os.system('rm positives.txt')

# Hash every file in a specified directory
def hashfile():

    # initiate hash variable
    md5_hash = hashlib.md5()

    # inform user of what the method will do
    print("This method will search through a directory and produce a hash value for each file inside.")
    
    # get directory
    dirname = input("Directory to hash: ")

    # iterate through directory
    print("\nFiles and directories:")
    for root, dirs, files in os.walk(dirname, topdown=False):
        for name in files:
            # print file name
            print(f"\nFile name:        {name}")

            # get and print file's absolute path
            fullpath = os.path.abspath(f"{root}/{name}")
            print("Absolute path:   ", fullpath)

            # generate and print the MD5 hash value for file
            with open(f"{dirname}/{name}","rb") as f:
                for byte_block in iter(lambda: f.read(4096),b""):
                    md5_hash.update(byte_block)
                print("Hash value:      ", md5_hash.hexdigest())

            # print size of file
            print("Size:            ", os.path.getsize(fullpath))

            # get and print the current time
            ct = datetime.datetime.now()
            print(f"current time:     {ct}")

        # print directory names
        for name in dirs:
            print(os.path.join(root, name))


# Main

hashfile()

# detect()

# inform the user that the program is done
print("\n\nDone.")


# End